version: 2.1

orbs:
  aws-eks: circleci/aws-eks@1.1.0
  kubernetes: circleci/kubernetes@0.12.0


jobs:
# lint job
    run-lint:
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout
        - run:
            name: install dependencies
            command: |
              sudo wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64
              sudo chmod +x /bin/hadolint
        - run:
            name: Run Lint
            command: |
              hadolint Dockerfile
              
# build and push docker image            
    push-docker-image:
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout
        - setup_remote_docker:
            version: 19.03.13
        - run:
            name: Push Docker Image
            command: |
              export TAG=v${CIRCLE_BUILD_NUM}
              export IMAGE_NAME=shashankcapstone
              docker build -t shashank81jain/$IMAGE_NAME .
              docker login -u shashank81jain -p Trishik@123 
              docker push shashank81jain/$IMAGE_NAME
  # creating kubernetes cluster in aws            
    create-small-cluster:
      executor: aws-eks/python3
      parameters:
        cluster-name:
          description: |
            Name of the EKS cluster
          type: string
      steps:
        - checkout
        - run:
            name: Inatall eksctl
            command: |
              if which eksctl > /dev/null; then
              echo "eksctl is already installed"
              exit 0
              fi
              mkdir -p eksctl_download
              curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C eksctl_download
              ls -lrt
              pwd  
              chmod +x eksctl_download/eksctl 
              SUDO=""
              if [ $(id -u) -ne 0 ] && which sudo > /dev/null ; then
                SUDO="sudo"
              fi
              $SUDO mv eksctl_download/eksctl /usr/local/bin/
              rmdir eksctl_download
        - aws-eks/install-aws-iam-authenticator:
            release-tag: ''
        - aws-eks/create-cluster:
            cluster-name: << parameters.cluster-name >>
            skip-kubectl-install: false
            verbose: 3
            node-type: t2.small
            nodes-max: 2
            ssh-access: false
            ssh-public-key: 'udapeople'   
    # deploy app using templates               
    deploy-application:
      executor: aws-eks/python3
      parameters:
        cluster-name:
          description: |
            Name of the EKS cluster
          type: string
        aws-region:
          description: |
            AWS region
          type: string
          default: "us-east-1"
      steps:
        - checkout
        - aws-eks/update-kubeconfig-with-authenticator:
            cluster-name: << parameters.cluster-name >>
            install-kubectl: true
            aws-region: << parameters.aws-region >>
        - kubernetes/create-or-update-resource:
            get-rollout-status: true
            resource-file-path: "deployments/deployment.yml"
            resource-name: deployment/shashankcapstone
        - kubernetes/create-or-update-resource:
            resource-file-path: "deployments/service.yml"
            resource-name: Service/shashankcapstone    

    test-application:
        executor: aws-eks/python3
        parameters:
          cluster-name:
            description: |
              Name of the EKS cluster
            type: string
          aws-region:
            description: |
              AWS region
            type: string
            default: ""
        steps:
          - aws-eks/update-kubeconfig-with-authenticator:
              cluster-name: << parameters.cluster-name >>
              install-kubectl: true
              aws-region: << parameters.aws-region >>
          - run:
              name: Wait for service to be ready
              command: |
                kubectl get pods
                kubectl get services
                kubectl describe pods           
workflows:
  default:
    jobs:
      - run-lint
      - push-docker-image:
          requires:
            - "run-lint"
      - create-small-cluster:
          cluster-name: shashankcapstone-cluster-deployment
          requires:
            - "push-docker-image"
      - deploy-application:
         cluster-name: shashankcapstone-cluster-deployment
         aws-region: $AWS_DEFAULT_REGION
         requires:
            - create-small-cluster
#            - push-docker-image
      - aws-eks/update-container-image:
          cluster-name: shashankcapstone-cluster-deployment
          container-image-updates: 'shashankcapstone=shashankcapstone:latest'
          record: true
          requires:
            - deploy-application
          resource-name: deployment/shashankcapstone      
      - test-application:
          cluster-name: shashankcapstone-cluster-deployment
          aws-region: $AWS_DEFAULT_REGION
          requires:
            #- aws-eks/update-container-image
            - deploy-application
